generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  password        String
  phone           String
  role            Role       @default(USER)
  profile_picture String
  bio             String
  posts           Post[]
  comments        Comment[]
  reactions       Reaction[]
  audit_logs      AuditLog[]
}

enum Role {
  ADMIN
  USER
}

enum PostStatus {
  Draft
  Published
  Scheduled
}

enum EntityType {
  Post
  Comment
  User
  Media
  Category
  Tag
  Reaction
}

enum ReactionType {
  Like
  Dislike
  Love
}

enum MediaType {
  Image
  Video
  Attachment
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  posts       PostCategory[]
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String     @db.VarChar(255)
  content    String     @db.Text
  userId     Int
  user       User       @relation(fields: [userId], references: [id])
  status     PostStatus @default(Draft)
  publish_at DateTime?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  tags       PostTag[]
  categories PostCategory[]
  comments   Comment[]
  media      Media[]
  
  @@index([userId])
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String?   @db.Text
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  posts       PostTag[]
}

model PostTag {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      Int
  created_at DateTime @default(now())

  @@id([postId, tagId])
  @@index([tagId])
  @@index([postId])
}

model PostCategory {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  created_at DateTime @default(now())

  @@id([postId, categoryId])
  @@index([categoryId])
  @@index([postId])
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String    @db.Text
  post_id    Int
  user_id    Int
  parent_id  Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  // Relations
  post       Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("CommentReplies", fields: [parent_id], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")
}

model Media {
  id       Int       @id @default(autoincrement())
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  file_url String    @db.VarChar(255)
  type     MediaType
  @@index([postId])
}

model Reaction {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [user_id], references: [id])
  user_id     Int
  entity_type EntityType
  entity_id   Int
  reaction    ReactionType
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  
  @@unique([user_id, entity_type, entity_id])
  @@index([entity_type, entity_id])
}

model AuditLog {
  id          Int        @id @default(autoincrement())
  user_id     Int
  action      String
  entity_type EntityType?
  entity_id   Int?
  timestamp   DateTime   @default(now())
  user        User       @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([entity_type, entity_id])
  @@map("audit_logs")
}